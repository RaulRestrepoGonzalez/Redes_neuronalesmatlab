function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 22-Oct-2022 14:46:30.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 16xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 100xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
IW1_1 = [1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;0.5 3.5 1.5 5 5 1.5 1.5 0.5 4 4 1.5 1.5 1.5 1.5 4 1;0 6 2 2 2 2 2 0 0 6 1 1 1 1 6 0;0 7 1.5 1.5 1.5 1.5 1.5 4 1 5 2.5 2 1.5 1.5 4 1;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;-0.4906114091349189632 10.051564376392583711 1.9580845853871300388 -1.4761952785573084768 -1.4761952785573084768 1.958084585387130705 1.958084585387130705 -0.49802628493185840952 -6.5940134081406220901 10.631567771600945349 0.50660801244122799503 -1.0928261777513741393 0.50846173139046291212 0.50846173139046291212 9.0330604408829611174 -0.98307653721907417577;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;0 6 2 2 2 2 2 0 0 6 1 1 1 1 6 0;0 6 2 2 2 2 2 0 0 6 1 1 1 1 6 0;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;-0.50090844826779079568 10.94943520549704985 1.6015898202518918936 -1.9047693176226481171 -1.9047693176226481171 1.6015898202518925597 1.6015898202518925597 1.5235949108490465242 -6.7324202869945910521 10.728786493923427869 1.2582803114010223666 -0.93354973286746423256 0.75215447162181314766 0.75215447162181314766 8.2838935297653346623 -0.49569105675637370467;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 3 3 3 3 3 3 0 5 1 1 4 1 1 4 0;0 5.5 2 2 2 2 2 4 3.5 2.5 2.5 3.5 1.5 1.5 3 1;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;0.5 2 2 5.5 5.5 2 2 0.5 6.5 1.5 1.5 3 1.5 1.5 3 1;0.33333333333333325932 4 1.6666666666666665186 4 4 1.6666666666666665186 1.6666666666666665186 3 5 2.3333333333333330373 2.3333333333333330373 2.9999999999999995559 1.6666666666666665186 1.6666666666666665186 2.6666666666666665186 1.3333333333333332593;0.33333333333333337034 4 1.6666666666666665186 4 4 1.6666666666666665186 1.6666666666666665186 3 5 2.3333333333333330373 2.3333333333333330373 2.9999999999999995559 1.6666666666666665186 1.6666666666666665186 2.6666666666666665186 1.3333333333333332593;0 5.5 2 2 2 2 2 4 3.5 2.5 2.5 3.5 1.5 1.5 3 1;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;0.5 4.5 1 4.5 4.5 1 1 4.5 5 3 3 2.5 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;1 1 1 8 8 1 1 1 8 2 2 2 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0 8 1 1 1 1 1 8 2 4 4 3 2 2 2 2;0.17951991472338257871 12.528230628503148836 -1.2138339544847878138 0.042805448578887350664 0.042805448578887350664 -1.2138339544847869256 -1.2138339544847869256 13.596415252036624821 -1.9956274608708763907 8.713707119764404041 6.210855666215849169 0.4621373812599465225 2.8566318318875376647 2.8566318318875376647 1.2878769176443474187 3.7132636637750757735];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    % no processing
    
    % Layer 1
    z1 = negdist_apply(IW1_1,X{1,ts});
    a1 = compet_apply(z1);
    
    % Output 1
    Y{1,ts} = a1;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(1,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Negative Distance Weight Function
function z = negdist_apply(w,p,~)
[S,R] = size(w);
Q = size(p,2);
if isa(w,'gpuArray')
    z = iNegDistApplyGPU(w,p,R,S,Q);
else
    z = iNegDistApplyCPU(w,p,S,Q);
end
end
function z = iNegDistApplyCPU(w,p,S,Q)
z = zeros(S,Q);
if (Q<S)
    pt = p';
    for q=1:Q
        z(:,q) = sum(bsxfun(@minus,w,pt(q,:)).^2,2);
    end
else
    wt = w';
    for i=1:S
        z(i,:) = sum(bsxfun(@minus,wt(:,i),p).^2,1);
    end
end
z = -sqrt(z);
end
function z = iNegDistApplyGPU(w,p,R,S,Q)
p = reshape(p,1,R,Q);
sd = arrayfun(@iNegDistApplyGPUHelper,w,p);
z = -sqrt(reshape(sum(sd,2),S,Q));
end
function sd = iNegDistApplyGPUHelper(w,p)
sd = (w-p) .^ 2;
end

% Competitive Transfer Function
function a = compet_apply(n,~)
if isempty(n)
    a = n;
else
    [S,Q] = size(n);
    nanInd = any(isnan(n),1);
    a = zeros(S,Q,'like',n);
    [~,maxRows] = max(n,[],1);
    onesInd = maxRows + S*(0:(Q-1));
    a(onesInd) = 1;
    a(:,nanInd) = NaN;
end
end
